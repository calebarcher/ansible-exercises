version: 2.1

commands:
  destroy-environment:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name myNodeExporterStack-${CIRCLE_WORKFLOW_ID:0:5}
  get-instance-dns:
    steps:
      - run:
          name: Getting instance public IPV4 DNS
          command: |
            echo '[all]' > ~/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --filters "Name=tag:Name,Values=node_exporter" \ 
            --output text > ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt


orbs:
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file node_exporter.yml \
              --stack-name myNodeExporterStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1

  create-inventory-file:
    docker:
      - image: amazon/cli
    steps:
      - checkout
      - get-instance-dns

  configure-infrastructure:
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["43:9b:80:68:47:bd:33:40:29:8f:f1:b6:f4:9b:1f:ca"]
      - get-instance-dns
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure Server
          command: |
            ansible-playbook -i ~/inventory.txt main.yml
      - destroy-environment

  # smoke-test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: smoke test
  #         command: |
  #           URL="https://blog.udacity.com"
  #           if curl -s --head ${URL}
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - destroy-environment
    
  # create-and-deploy-frontend:
  #   docker: 
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Execute bucket.yml - Create Clouformation Stack
  #         command: |
  #             aws cloudformation deploy \
  #             --template-file bucket.yml \
  #             --stack-name create-bucket-${CIRCLE_WORKFLOW_ID:0:5} \
  #             --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:5}"
  #     - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:5} --delete
  
  # get-last-deployment-id:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: yum install -y tar gzip
  #     - run:
  #         name: Fetch and save the old pipeline ID (Bucket Name) responsible for the last release
  #         command: |
  #           aws cloudformation \
  #           list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
  #           --no-paginate --output text > ~/textfile.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - textfile.txt

  # promote-to-production:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Execute cloudfront.yml
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file cloudfront.yml \
  #           --stack-name production-distro \
  #           --parameter-overrides PipelineID="my-bucket-${CIRCLE_WORKFLOW_ID:0:5}"
  
  # cleanup-old-frontend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: yum install -y tar gzip
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Destroy the previous s3 bucket and cloudformation stack.
  #         command: |
  #           export OldBucketID=$(cat ~/textfile.txt)
  #           aws s3 rm "s3://${OldBucketID}" --recursive


workflows:
  my_workflow:
    jobs:
      - create-infrastructure
      - configure-infrastructure:
          requires:
            - create-infrastructure
      # - smoke-test
      # - create-and-deploy-frontend
      # - promote-to-production:
      #     requires:
      #       - create-and-deploy-frontend
      # - get-last-deployment-id
      # - cleanup-old-frontend:
      #     requires:
      #       - get-last-deployment-id
      #       - promote-to-production

      